apiVersion: v1
kind: Service   
metadata: 
  name: mv-be-app-service # 다른 리소스가 이 이름으로 Service를 참조
  labels: # 리소스에 태그를 추가하는 키-값, Deployment, Ingress가 이 태그를 기준으로 이 Serivce를 연결
    app.kubernetes.io/name: mv-be
    app.kubernetes.io/instance: mv-be
    app.kubernetes.io/version: "1.0.0"
spec:
  selector: # 이 Service가 연결할 pod를 식별하는 레이블, 지정한 키-값이 pod의 레이블과 일치해야 됨
    app.kubernetes.io/name: mv-be
    app.kubernetes.io/instance: mv-be
  type: ClusterIP # Service가 노출되는 방식, ClusterIP는 기본값으로 클러스터 내부에서만 접근 가능
  ports:
    - name: http # 포트의 논리적 이름
      protocol: TCP # 사용할 통신 프로토콜
      port: 8080 # 다른 리소스에서 이 Service에 접근할 때 사용할 포트
      targetPort: 8080 # Pod 내에서 애플리케이션이 사용하는 포트
    - name: prometheus
      protocol: TCP
      port: 9090
      targetPort: 9090
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mv-be-ingress
  annotations: # AWS ALB와 관련된 설정을 추가하는 메타베이터
    alb.ingress.kubernetes.io/scheme: internet-facing # ALB를 공개(internet-facing) 또는 내부(internal)로 설정
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:194722398200:certificate/75bec25f-8f2b-4bee-ab78-a342da07ddc1
    alb.ingress.kubernetes.io/success-codes: 200-399 # redirection response(302)을 반환하면서도 "정상" 상태로 간주되길 원한다면 300대까지 포함
    alb.ingress.kubernetes.io/load-balancer-name: mentoview-ingress-alb
    alb.ingress.kubernetes.io/group.name: mv # 동일한 group.name을 가진 ingress는 하나의 ALB로 관리
    alb.ingress.kubernetes.io/target-type: ip # Pod의 노출된 IP가 Target Group에 매핑
    alb.ingress.kubernetes.io/healthcheck-path: "/api/test" # ALB 타겟 그룹의 헬스 체크 경로
    alb.ingress.kubernetes.io/healthcheck-port: "8080"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "20" 
    # 헬스 체크가 실행되는 주기, 20초마다 헬스 체크
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "10" 
    # ALB가 헬스 체크 응답 기다리는 최대 시간, ALB Target으로부터 응답을 받는데 10초 이상 걸리면 헬스 체크 실패
spec:
  ingressClassName: alb # 사용할 Ingress 컨트롤러 지정
  rules: # host 및 path에 따라 트래픽을 라우팅하는 규칙 정의
    - host: mentoview.site # 라우팅 규칙이 적용되는 도메인
      http:
        paths: # 요청 URL의 경로를 기반으로 트래픽을 특정 서비스로 전달하기 위한 규칙
          - path: /api
            pathType: Prefix
            # Prefix: 경로가 지정된 값으로 시작하면 매칭(예: /api로 시작하는 모든 경로)
            # Exact: 경로가 정확히 일치할 때만 매칭(예: /api)
            # ImplementationSpecific: 경로 매칭은 Ingress 컨트롤러(AWS ALB, NGINX 등)의 구현 방식에 따라 결정
            backend: # 트래픽을 전달할 대상 서비스와 포트
              service:
                name: mv-be-app-service
                port:
                  number: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mv-be-app-deployment
spec:
  replicas: 2
  selector:
    matchLabels: # pod의 레이블(name, instance)가 mv-be인 경우 이 Deployment가 해당 pod를 관리
      app.kubernetes.io/name: mv-be
      app.kubernetes.io/instance: mv-be
  template:
    metadata:
      labels: 
      # 이 Deployment가 생성한 pod에 추가할 레이블 정의
      # name, instance 레이블은 Service 및 Ingress와 같은 다른 리소스가 이 pod를 참조할 때 사용
        app.kubernetes.io/name: mv-be
        app.kubernetes.io/instance: mv-be
    spec:
      containers: # pod 내부에 실행될 컨테이너 목록
      - name: mv-be-app-container
        image: 194722398200.dkr.ecr.ap-northeast-2.amazonaws.com/mentoview-repo:be-50c655bac3d6d87b8dcce2658f56f37b3eb3d4ac
        ports:
          - protocol: TCP
            containerPort: 8080 # 컨테이너 내부에서 APP이 수신하는 포트
        resources:  # 리소스 요청 및 제한 설정
          requests:
            cpu: "800m"  # 요청하는 CPU 리소스 설정
          limits:
            cpu: "1000m"  # 제한하는 CPU 리소스 설정
